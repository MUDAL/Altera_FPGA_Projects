|rgb_display
rst_n => uart_rx:uart_interface.rst_n
rst_n => encoder:colour_encoder.rst_n
rst_n => spi_tx:spi_interface.rst_n
rst_n => pll:pll.areset
clk => pll:pll.inclk0
data_in => uart_rx:uart_interface.data_in
led <= spi_tx:spi_interface.led
sck <= spi_tx:spi_interface.sck
mosi <= spi_tx:spi_interface.mosi
dc <= spi_tx:spi_interface.dc
d_rst_n <= spi_tx:spi_interface.d_rst_n
cs <= spi_tx:spi_interface.cs


|rgb_display|pll:pll
areset => altpll:altpll_component.areset
inclk0 => altpll:altpll_component.inclk[0]
c0 <= altpll:altpll_component.clk[0]


|rgb_display|pll:pll|altpll:altpll_component
inclk[0] => pll_altpll:auto_generated.inclk[0]
inclk[1] => pll_altpll:auto_generated.inclk[1]
fbin => ~NO_FANOUT~
pllena => ~NO_FANOUT~
clkswitch => ~NO_FANOUT~
areset => pll_altpll:auto_generated.areset
pfdena => ~NO_FANOUT~
clkena[0] => ~NO_FANOUT~
clkena[1] => ~NO_FANOUT~
clkena[2] => ~NO_FANOUT~
clkena[3] => ~NO_FANOUT~
clkena[4] => ~NO_FANOUT~
clkena[5] => ~NO_FANOUT~
extclkena[0] => ~NO_FANOUT~
extclkena[1] => ~NO_FANOUT~
extclkena[2] => ~NO_FANOUT~
extclkena[3] => ~NO_FANOUT~
scanclk => ~NO_FANOUT~
scanclkena => ~NO_FANOUT~
scanaclr => ~NO_FANOUT~
scanread => ~NO_FANOUT~
scanwrite => ~NO_FANOUT~
scandata => ~NO_FANOUT~
phasecounterselect[0] => ~NO_FANOUT~
phasecounterselect[1] => ~NO_FANOUT~
phasecounterselect[2] => ~NO_FANOUT~
phasecounterselect[3] => ~NO_FANOUT~
phaseupdown => ~NO_FANOUT~
phasestep => ~NO_FANOUT~
configupdate => ~NO_FANOUT~
fbmimicbidir <> <GND>
clk[0] <= clk[0].DB_MAX_OUTPUT_PORT_TYPE
clk[1] <= clk[1].DB_MAX_OUTPUT_PORT_TYPE
clk[2] <= clk[2].DB_MAX_OUTPUT_PORT_TYPE
clk[3] <= clk[3].DB_MAX_OUTPUT_PORT_TYPE
clk[4] <= clk[4].DB_MAX_OUTPUT_PORT_TYPE
extclk[0] <= <GND>
extclk[1] <= <GND>
extclk[2] <= <GND>
extclk[3] <= <GND>
clkbad[0] <= <GND>
clkbad[1] <= <GND>
enable1 <= <GND>
enable0 <= <GND>
activeclock <= <GND>
clkloss <= <GND>
locked <= <GND>
scandataout <= <GND>
scandone <= <GND>
sclkout0 <= <GND>
sclkout1 <= <GND>
phasedone <= <GND>
vcooverrange <= <GND>
vcounderrange <= <GND>
fbout <= <GND>
fref <= <GND>
icdrclk <= <GND>


|rgb_display|pll:pll|altpll:altpll_component|pll_altpll:auto_generated
areset => pll1.ARESET
clk[0] <= pll1.CLK
clk[1] <= pll1.CLK1
clk[2] <= pll1.CLK2
clk[3] <= pll1.CLK3
clk[4] <= pll1.CLK4
inclk[0] => pll1.CLK
inclk[1] => pll1.CLK1


|rgb_display|uart_rx:uart_interface
rst_n => done_reg.ACLR
rst_n => data_reg[1].ACLR
rst_n => data_reg[2].ACLR
rst_n => data_reg[3].ACLR
rst_n => data_reg[4].ACLR
rst_n => data_reg[5].ACLR
rst_n => data_reg[6].ACLR
rst_n => data_reg[7].ACLR
rst_n => data_reg[8].ACLR
rst_n => index_reg[0].ACLR
rst_n => index_reg[1].ACLR
rst_n => index_reg[2].ACLR
rst_n => index_reg[3].ACLR
rst_n => clks_reg[0].ACLR
rst_n => clks_reg[1].ACLR
rst_n => clks_reg[2].ACLR
rst_n => clks_reg[3].ACLR
rst_n => clks_reg[4].ACLR
rst_n => clks_reg[5].ACLR
rst_n => clks_reg[6].ACLR
rst_n => clks_reg[7].ACLR
rst_n => rx_reg.ACLR
rst_n => state~3.DATAIN
clk => done_reg.CLK
clk => data_reg[1].CLK
clk => data_reg[2].CLK
clk => data_reg[3].CLK
clk => data_reg[4].CLK
clk => data_reg[5].CLK
clk => data_reg[6].CLK
clk => data_reg[7].CLK
clk => data_reg[8].CLK
clk => index_reg[0].CLK
clk => index_reg[1].CLK
clk => index_reg[2].CLK
clk => index_reg[3].CLK
clk => clks_reg[0].CLK
clk => clks_reg[1].CLK
clk => clks_reg[2].CLK
clk => clks_reg[3].CLK
clk => clks_reg[4].CLK
clk => clks_reg[5].CLK
clk => clks_reg[6].CLK
clk => clks_reg[7].CLK
clk => rx_reg.CLK
clk => state~1.DATAIN
en => next_state_logic.IN1
data_in => rx_reg.DATAIN
data_out[0] <= data_reg[1].DB_MAX_OUTPUT_PORT_TYPE
data_out[1] <= data_reg[2].DB_MAX_OUTPUT_PORT_TYPE
data_out[2] <= data_reg[3].DB_MAX_OUTPUT_PORT_TYPE
data_out[3] <= data_reg[4].DB_MAX_OUTPUT_PORT_TYPE
data_out[4] <= data_reg[5].DB_MAX_OUTPUT_PORT_TYPE
data_out[5] <= data_reg[6].DB_MAX_OUTPUT_PORT_TYPE
data_out[6] <= data_reg[7].DB_MAX_OUTPUT_PORT_TYPE
data_out[7] <= data_reg[8].DB_MAX_OUTPUT_PORT_TYPE
done <= done_reg.DB_MAX_OUTPUT_PORT_TYPE


|rgb_display|encoder:colour_encoder
rst_n => done_reg.ACLR
rst_n => colour_reg[0].ACLR
rst_n => colour_reg[1].ACLR
rst_n => ascii_reg[0].ACLR
rst_n => ascii_reg[1].ACLR
rst_n => ascii_reg[2].ACLR
rst_n => ascii_reg[3].ACLR
rst_n => ascii_reg[4].ACLR
rst_n => ascii_reg[6].ACLR
rst_n => ascii_reg[7].ACLR
rst_n => en_reg.ACLR
clk => done_reg.CLK
clk => colour_reg[0].CLK
clk => colour_reg[1].CLK
clk => ascii_reg[0].CLK
clk => ascii_reg[1].CLK
clk => ascii_reg[2].CLK
clk => ascii_reg[3].CLK
clk => ascii_reg[4].CLK
clk => ascii_reg[6].CLK
clk => ascii_reg[7].CLK
clk => en_reg.CLK
en => en_reg.DATAIN
ascii_in[0] => ascii_reg[0].DATAIN
ascii_in[1] => ascii_reg[1].DATAIN
ascii_in[2] => ascii_reg[2].DATAIN
ascii_in[3] => ascii_reg[3].DATAIN
ascii_in[4] => ascii_reg[4].DATAIN
ascii_in[5] => ~NO_FANOUT~
ascii_in[6] => ascii_reg[6].DATAIN
ascii_in[7] => ascii_reg[7].DATAIN
colour[0] <= colour_reg[0].DB_MAX_OUTPUT_PORT_TYPE
colour[1] <= colour_reg[1].DB_MAX_OUTPUT_PORT_TYPE
done <= done_reg.DB_MAX_OUTPUT_PORT_TYPE


|rgb_display|spi_tx:spi_interface
rst_n => index_reg[0].PRESET
rst_n => index_reg[1].PRESET
rst_n => index_reg[2].PRESET
rst_n => cnt4_reg[0].ACLR
rst_n => cnt4_reg[1].ACLR
rst_n => cnt4_reg[2].ACLR
rst_n => cnt3_reg[0].ACLR
rst_n => cnt3_reg[1].ACLR
rst_n => cnt3_reg[2].ACLR
rst_n => cnt3_reg[3].ACLR
rst_n => cnt3_reg[4].ACLR
rst_n => cnt3_reg[5].ACLR
rst_n => cnt3_reg[6].ACLR
rst_n => cnt3_reg[7].ACLR
rst_n => cnt3_reg[8].ACLR
rst_n => cnt3_reg[9].ACLR
rst_n => cnt3_reg[10].ACLR
rst_n => cnt3_reg[11].ACLR
rst_n => cnt3_reg[12].ACLR
rst_n => cnt3_reg[13].ACLR
rst_n => cnt3_reg[14].ACLR
rst_n => cnt2_reg[0].ACLR
rst_n => cnt2_reg[1].ACLR
rst_n => cnt2_reg[2].ACLR
rst_n => cnt2_reg[3].ACLR
rst_n => cnt2_reg[4].ACLR
rst_n => cnt2_reg[5].ACLR
rst_n => cnt2_reg[6].ACLR
rst_n => cnt1_reg[0].ACLR
rst_n => cnt1_reg[1].ACLR
rst_n => cnt1_reg[2].ACLR
rst_n => cnt1_reg[3].ACLR
rst_n => cnt1_reg[4].ACLR
rst_n => cnt1_reg[5].ACLR
rst_n => cnt1_reg[6].ACLR
rst_n => cnt1_reg[7].ACLR
rst_n => cnt1_reg[8].ACLR
rst_n => cnt1_reg[9].ACLR
rst_n => cnt1_reg[10].ACLR
rst_n => dcmd_reg.ACLR
rst_n => bsel_reg.ACLR
rst_n => mosi_reg.ACLR
rst_n => sck3_reg.ACLR
rst_n => sck2_reg.ACLR
rst_n => sck1_reg.ACLR
rst_n => state~3.DATAIN
clk => index_reg[0].CLK
clk => index_reg[1].CLK
clk => index_reg[2].CLK
clk => cnt4_reg[0].CLK
clk => cnt4_reg[1].CLK
clk => cnt4_reg[2].CLK
clk => cnt3_reg[0].CLK
clk => cnt3_reg[1].CLK
clk => cnt3_reg[2].CLK
clk => cnt3_reg[3].CLK
clk => cnt3_reg[4].CLK
clk => cnt3_reg[5].CLK
clk => cnt3_reg[6].CLK
clk => cnt3_reg[7].CLK
clk => cnt3_reg[8].CLK
clk => cnt3_reg[9].CLK
clk => cnt3_reg[10].CLK
clk => cnt3_reg[11].CLK
clk => cnt3_reg[12].CLK
clk => cnt3_reg[13].CLK
clk => cnt3_reg[14].CLK
clk => cnt2_reg[0].CLK
clk => cnt2_reg[1].CLK
clk => cnt2_reg[2].CLK
clk => cnt2_reg[3].CLK
clk => cnt2_reg[4].CLK
clk => cnt2_reg[5].CLK
clk => cnt2_reg[6].CLK
clk => cnt1_reg[0].CLK
clk => cnt1_reg[1].CLK
clk => cnt1_reg[2].CLK
clk => cnt1_reg[3].CLK
clk => cnt1_reg[4].CLK
clk => cnt1_reg[5].CLK
clk => cnt1_reg[6].CLK
clk => cnt1_reg[7].CLK
clk => cnt1_reg[8].CLK
clk => cnt1_reg[9].CLK
clk => cnt1_reg[10].CLK
clk => dcmd_reg.CLK
clk => bsel_reg.CLK
clk => mosi_reg.CLK
clk => sck3_reg.CLK
clk => sck2_reg.CLK
clk => sck1_reg.CLK
clk => state~1.DATAIN
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => next_state.OUTPUTSELECT
en => cs.IN0
colour[0] => Mux0.IN5
colour[0] => Mux1.IN5
colour[0] => Mux2.IN5
colour[0] => Mux3.IN5
colour[0] => Mux4.IN5
colour[0] => mosi_data[2].DATAB
colour[0] => mosi_data[1].DATAB
colour[0] => mosi_data[0].DATAB
colour[0] => mosi_data[7].DATAA
colour[0] => mosi_data[6].DATAA
colour[0] => mosi_data[5].DATAA
colour[1] => Mux0.IN4
colour[1] => Mux1.IN4
colour[1] => Mux2.IN4
colour[1] => Mux3.IN4
colour[1] => Mux4.IN4
colour[1] => mosi_data[4].DATAA
colour[1] => mosi_data[3].DATAA
colour[1] => mosi_data[2].DATAA
colour[1] => mosi_data[1].DATAA
colour[1] => mosi_data[0].DATAA
led <= <VCC>
sck <= sck3_reg.DB_MAX_OUTPUT_PORT_TYPE
mosi <= mosi_reg.DB_MAX_OUTPUT_PORT_TYPE
dc <= dcmd_reg.DB_MAX_OUTPUT_PORT_TYPE
d_rst_n <= d_rst_n.DB_MAX_OUTPUT_PORT_TYPE
cs <= cs.DB_MAX_OUTPUT_PORT_TYPE
rdy <= rdy.DB_MAX_OUTPUT_PORT_TYPE


